// Code generated by k8s code-generator DO NOT EDIT.

/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/iSofiane/flink-on-k8s-operator/pkg/apis/flinkoperator.k8s.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FlinkApplicationLister helps list FlinkApplications.
type FlinkApplicationLister interface {
	// List lists all FlinkApplications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FlinkApplication, err error)
	// FlinkApplications returns an object that can list and get FlinkApplications.
	FlinkApplications(namespace string) FlinkApplicationNamespaceLister
	FlinkApplicationListerExpansion
}

// flinkApplicationLister implements the FlinkApplicationLister interface.
type flinkApplicationLister struct {
	indexer cache.Indexer
}

// NewFlinkApplicationLister returns a new FlinkApplicationLister.
func NewFlinkApplicationLister(indexer cache.Indexer) FlinkApplicationLister {
	return &flinkApplicationLister{indexer: indexer}
}

// List lists all FlinkApplications in the indexer.
func (s *flinkApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.FlinkApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlinkApplication))
	})
	return ret, err
}

// FlinkApplications returns an object that can list and get FlinkApplications.
func (s *flinkApplicationLister) FlinkApplications(namespace string) FlinkApplicationNamespaceLister {
	return flinkApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FlinkApplicationNamespaceLister helps list and get FlinkApplications.
type FlinkApplicationNamespaceLister interface {
	// List lists all FlinkApplications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FlinkApplication, err error)
	// Get retrieves the FlinkApplication from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FlinkApplication, error)
	FlinkApplicationNamespaceListerExpansion
}

// flinkApplicationNamespaceLister implements the FlinkApplicationNamespaceLister
// interface.
type flinkApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FlinkApplications in the indexer for a given namespace.
func (s flinkApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FlinkApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlinkApplication))
	})
	return ret, err
}

// Get retrieves the FlinkApplication from the indexer for a given namespace and name.
func (s flinkApplicationNamespaceLister) Get(name string) (*v1alpha1.FlinkApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("flinkapplication"), name)
	}
	return obj.(*v1alpha1.FlinkApplication), nil
}
